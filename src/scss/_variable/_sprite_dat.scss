/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$sp-i-block-data-name: 'sp-i-block-data';
$sp-i-block-data-x: 0px;
$sp-i-block-data-y: 0px;
$sp-i-block-data-offset-x: 0px;
$sp-i-block-data-offset-y: 0px;
$sp-i-block-data-width: 17px;
$sp-i-block-data-height: 17px;
$sp-i-block-data-total-width: 24px;
$sp-i-block-data-total-height: 166px;
$sp-i-block-data-image: '../img/sprite_dat.png';
$sp-i-block-data: (0px, 0px, 0px, 0px, 17px, 17px, 24px, 166px, '../img/sprite_dat.png', 'sp-i-block-data', );
$sp-i-block-see-name: 'sp-i-block-see';
$sp-i-block-see-x: 0px;
$sp-i-block-see-y: 22px;
$sp-i-block-see-offset-x: 0px;
$sp-i-block-see-offset-y: -22px;
$sp-i-block-see-width: 24px;
$sp-i-block-see-height: 15px;
$sp-i-block-see-total-width: 24px;
$sp-i-block-see-total-height: 166px;
$sp-i-block-see-image: '../img/sprite_dat.png';
$sp-i-block-see: (0px, 22px, 0px, -22px, 24px, 15px, 24px, 166px, '../img/sprite_dat.png', 'sp-i-block-see', );
$sp-i-dictionary-name: 'sp-i-dictionary';
$sp-i-dictionary-x: 0px;
$sp-i-dictionary-y: 42px;
$sp-i-dictionary-offset-x: 0px;
$sp-i-dictionary-offset-y: -42px;
$sp-i-dictionary-width: 20px;
$sp-i-dictionary-height: 20px;
$sp-i-dictionary-total-width: 24px;
$sp-i-dictionary-total-height: 166px;
$sp-i-dictionary-image: '../img/sprite_dat.png';
$sp-i-dictionary: (0px, 42px, 0px, -42px, 20px, 20px, 24px, 166px, '../img/sprite_dat.png', 'sp-i-dictionary', );
$sp-i-lang-a-name: 'sp-i-lang-a';
$sp-i-lang-a-x: 0px;
$sp-i-lang-a-y: 67px;
$sp-i-lang-a-offset-x: 0px;
$sp-i-lang-a-offset-y: -67px;
$sp-i-lang-a-width: 19px;
$sp-i-lang-a-height: 16px;
$sp-i-lang-a-total-width: 24px;
$sp-i-lang-a-total-height: 166px;
$sp-i-lang-a-image: '../img/sprite_dat.png';
$sp-i-lang-a: (0px, 67px, 0px, -67px, 19px, 16px, 24px, 166px, '../img/sprite_dat.png', 'sp-i-lang-a', );
$sp-i-lang-h-name: 'sp-i-lang-h';
$sp-i-lang-h-x: 0px;
$sp-i-lang-h-y: 88px;
$sp-i-lang-h-offset-x: 0px;
$sp-i-lang-h-offset-y: -88px;
$sp-i-lang-h-width: 19px;
$sp-i-lang-h-height: 16px;
$sp-i-lang-h-total-width: 24px;
$sp-i-lang-h-total-height: 166px;
$sp-i-lang-h-image: '../img/sprite_dat.png';
$sp-i-lang-h: (0px, 88px, 0px, -88px, 19px, 16px, 24px, 166px, '../img/sprite_dat.png', 'sp-i-lang-h', );
$sp-i-lang-n-name: 'sp-i-lang-n';
$sp-i-lang-n-x: 0px;
$sp-i-lang-n-y: 109px;
$sp-i-lang-n-offset-x: 0px;
$sp-i-lang-n-offset-y: -109px;
$sp-i-lang-n-width: 19px;
$sp-i-lang-n-height: 16px;
$sp-i-lang-n-total-width: 24px;
$sp-i-lang-n-total-height: 166px;
$sp-i-lang-n-image: '../img/sprite_dat.png';
$sp-i-lang-n: (0px, 109px, 0px, -109px, 19px, 16px, 24px, 166px, '../img/sprite_dat.png', 'sp-i-lang-n', );
$sp-i-search-mobile-name: 'sp-i-search-mobile';
$sp-i-search-mobile-x: 0px;
$sp-i-search-mobile-y: 130px;
$sp-i-search-mobile-offset-x: 0px;
$sp-i-search-mobile-offset-y: -130px;
$sp-i-search-mobile-width: 12px;
$sp-i-search-mobile-height: 11px;
$sp-i-search-mobile-total-width: 24px;
$sp-i-search-mobile-total-height: 166px;
$sp-i-search-mobile-image: '../img/sprite_dat.png';
$sp-i-search-mobile: (0px, 130px, 0px, -130px, 12px, 11px, 24px, 166px, '../img/sprite_dat.png', 'sp-i-search-mobile', );
$sp-i-search-name: 'sp-i-search';
$sp-i-search-x: 0px;
$sp-i-search-y: 146px;
$sp-i-search-offset-x: 0px;
$sp-i-search-offset-y: -146px;
$sp-i-search-width: 22px;
$sp-i-search-height: 20px;
$sp-i-search-total-width: 24px;
$sp-i-search-total-height: 166px;
$sp-i-search-image: '../img/sprite_dat.png';
$sp-i-search: (0px, 146px, 0px, -146px, 22px, 20px, 24px, 166px, '../img/sprite_dat.png', 'sp-i-search', );
$sp-i-block-data-2x-name: 'sp-i-block-data@2x';
$sp-i-block-data-2x-x: 0px;
$sp-i-block-data-2x-y: 0px;
$sp-i-block-data-2x-offset-x: 0px;
$sp-i-block-data-2x-offset-y: 0px;
$sp-i-block-data-2x-width: 34px;
$sp-i-block-data-2x-height: 34px;
$sp-i-block-data-2x-total-width: 48px;
$sp-i-block-data-2x-total-height: 332px;
$sp-i-block-data-2x-image: '../img/sprite_dat@2x.png';
$sp-i-block-data-2x: (0px, 0px, 0px, 0px, 34px, 34px, 48px, 332px, '../img/sprite_dat@2x.png', 'sp-i-block-data@2x', );
$sp-i-block-see-2x-name: 'sp-i-block-see@2x';
$sp-i-block-see-2x-x: 0px;
$sp-i-block-see-2x-y: 44px;
$sp-i-block-see-2x-offset-x: 0px;
$sp-i-block-see-2x-offset-y: -44px;
$sp-i-block-see-2x-width: 48px;
$sp-i-block-see-2x-height: 30px;
$sp-i-block-see-2x-total-width: 48px;
$sp-i-block-see-2x-total-height: 332px;
$sp-i-block-see-2x-image: '../img/sprite_dat@2x.png';
$sp-i-block-see-2x: (0px, 44px, 0px, -44px, 48px, 30px, 48px, 332px, '../img/sprite_dat@2x.png', 'sp-i-block-see@2x', );
$sp-i-dictionary-2x-name: 'sp-i-dictionary@2x';
$sp-i-dictionary-2x-x: 0px;
$sp-i-dictionary-2x-y: 84px;
$sp-i-dictionary-2x-offset-x: 0px;
$sp-i-dictionary-2x-offset-y: -84px;
$sp-i-dictionary-2x-width: 40px;
$sp-i-dictionary-2x-height: 40px;
$sp-i-dictionary-2x-total-width: 48px;
$sp-i-dictionary-2x-total-height: 332px;
$sp-i-dictionary-2x-image: '../img/sprite_dat@2x.png';
$sp-i-dictionary-2x: (0px, 84px, 0px, -84px, 40px, 40px, 48px, 332px, '../img/sprite_dat@2x.png', 'sp-i-dictionary@2x', );
$sp-i-lang-a-2x-name: 'sp-i-lang-a@2x';
$sp-i-lang-a-2x-x: 0px;
$sp-i-lang-a-2x-y: 134px;
$sp-i-lang-a-2x-offset-x: 0px;
$sp-i-lang-a-2x-offset-y: -134px;
$sp-i-lang-a-2x-width: 38px;
$sp-i-lang-a-2x-height: 32px;
$sp-i-lang-a-2x-total-width: 48px;
$sp-i-lang-a-2x-total-height: 332px;
$sp-i-lang-a-2x-image: '../img/sprite_dat@2x.png';
$sp-i-lang-a-2x: (0px, 134px, 0px, -134px, 38px, 32px, 48px, 332px, '../img/sprite_dat@2x.png', 'sp-i-lang-a@2x', );
$sp-i-lang-h-2x-name: 'sp-i-lang-h@2x';
$sp-i-lang-h-2x-x: 0px;
$sp-i-lang-h-2x-y: 176px;
$sp-i-lang-h-2x-offset-x: 0px;
$sp-i-lang-h-2x-offset-y: -176px;
$sp-i-lang-h-2x-width: 38px;
$sp-i-lang-h-2x-height: 32px;
$sp-i-lang-h-2x-total-width: 48px;
$sp-i-lang-h-2x-total-height: 332px;
$sp-i-lang-h-2x-image: '../img/sprite_dat@2x.png';
$sp-i-lang-h-2x: (0px, 176px, 0px, -176px, 38px, 32px, 48px, 332px, '../img/sprite_dat@2x.png', 'sp-i-lang-h@2x', );
$sp-i-lang-n-2x-name: 'sp-i-lang-n@2x';
$sp-i-lang-n-2x-x: 0px;
$sp-i-lang-n-2x-y: 218px;
$sp-i-lang-n-2x-offset-x: 0px;
$sp-i-lang-n-2x-offset-y: -218px;
$sp-i-lang-n-2x-width: 38px;
$sp-i-lang-n-2x-height: 32px;
$sp-i-lang-n-2x-total-width: 48px;
$sp-i-lang-n-2x-total-height: 332px;
$sp-i-lang-n-2x-image: '../img/sprite_dat@2x.png';
$sp-i-lang-n-2x: (0px, 218px, 0px, -218px, 38px, 32px, 48px, 332px, '../img/sprite_dat@2x.png', 'sp-i-lang-n@2x', );
$sp-i-search-mobile-2x-name: 'sp-i-search-mobile@2x';
$sp-i-search-mobile-2x-x: 0px;
$sp-i-search-mobile-2x-y: 260px;
$sp-i-search-mobile-2x-offset-x: 0px;
$sp-i-search-mobile-2x-offset-y: -260px;
$sp-i-search-mobile-2x-width: 24px;
$sp-i-search-mobile-2x-height: 22px;
$sp-i-search-mobile-2x-total-width: 48px;
$sp-i-search-mobile-2x-total-height: 332px;
$sp-i-search-mobile-2x-image: '../img/sprite_dat@2x.png';
$sp-i-search-mobile-2x: (0px, 260px, 0px, -260px, 24px, 22px, 48px, 332px, '../img/sprite_dat@2x.png', 'sp-i-search-mobile@2x', );
$sp-i-search-2x-name: 'sp-i-search@2x';
$sp-i-search-2x-x: 0px;
$sp-i-search-2x-y: 292px;
$sp-i-search-2x-offset-x: 0px;
$sp-i-search-2x-offset-y: -292px;
$sp-i-search-2x-width: 44px;
$sp-i-search-2x-height: 40px;
$sp-i-search-2x-total-width: 48px;
$sp-i-search-2x-total-height: 332px;
$sp-i-search-2x-image: '../img/sprite_dat@2x.png';
$sp-i-search-2x: (0px, 292px, 0px, -292px, 44px, 40px, 48px, 332px, '../img/sprite_dat@2x.png', 'sp-i-search@2x', );
$spritesheet-width: 24px;
$spritesheet-height: 166px;
$spritesheet-image: '../img/sprite_dat.png';
$spritesheet-sprites: ($sp-i-block-data, $sp-i-block-see, $sp-i-dictionary, $sp-i-lang-a, $sp-i-lang-h, $sp-i-lang-n, $sp-i-search-mobile, $sp-i-search, );
$spritesheet: (24px, 166px, '../img/sprite_dat.png', $spritesheet-sprites, );
$retina-spritesheet-width: 48px;
$retina-spritesheet-height: 332px;
$retina-spritesheet-image: '../img/sprite_dat@2x.png';
$retina-spritesheet-sprites: ($sp-i-block-data-2x, $sp-i-block-see-2x, $sp-i-dictionary-2x, $sp-i-lang-a-2x, $sp-i-lang-h-2x, $sp-i-lang-n-2x, $sp-i-search-mobile-2x, $sp-i-search-2x, );
$retina-spritesheet: (48px, 332px, '../img/sprite_dat@2x.png', $retina-spritesheet-sprites, );

/*
These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.

The list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.
*/
$sp-i-block-data-group-name: 'sp-i-block-data';
$sp-i-block-data-group: ('sp-i-block-data', $sp-i-block-data, $sp-i-block-data-2x, );
$sp-i-block-see-group-name: 'sp-i-block-see';
$sp-i-block-see-group: ('sp-i-block-see', $sp-i-block-see, $sp-i-block-see-2x, );
$sp-i-dictionary-group-name: 'sp-i-dictionary';
$sp-i-dictionary-group: ('sp-i-dictionary', $sp-i-dictionary, $sp-i-dictionary-2x, );
$sp-i-lang-a-group-name: 'sp-i-lang-a';
$sp-i-lang-a-group: ('sp-i-lang-a', $sp-i-lang-a, $sp-i-lang-a-2x, );
$sp-i-lang-h-group-name: 'sp-i-lang-h';
$sp-i-lang-h-group: ('sp-i-lang-h', $sp-i-lang-h, $sp-i-lang-h-2x, );
$sp-i-lang-n-group-name: 'sp-i-lang-n';
$sp-i-lang-n-group: ('sp-i-lang-n', $sp-i-lang-n, $sp-i-lang-n-2x, );
$sp-i-search-mobile-group-name: 'sp-i-search-mobile';
$sp-i-search-mobile-group: ('sp-i-search-mobile', $sp-i-search-mobile, $sp-i-search-mobile-2x, );
$sp-i-search-group-name: 'sp-i-search';
$sp-i-search-group: ('sp-i-search', $sp-i-search, $sp-i-search-2x, );
$retina-groups: ($sp-i-block-data-group, $sp-i-block-see-group, $sp-i-dictionary-group, $sp-i-lang-a-group, $sp-i-lang-h-group, $sp-i-lang-n-group, $sp-i-search-mobile-group, $sp-i-search-group, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite.
  It should be used with a "retina group" variable.

The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/

$icon-home-group: ('icon-home', $icon-home, $icon-home-2x, );

.icon-home {
  @include retina-sprite($icon-home-group);
}
*/
@mixin sprite-background-size($sprite) {
  $sprite-total-width: nth($sprite, 7);
  $sprite-total-height: nth($sprite, 8);
  background-size: $sprite-total-width $sprite-total-height;
}

@mixin retina-sprite($retina-group) {
  $normal-sprite: nth($retina-group, 2);
  $retina-sprite: nth($retina-group, 3);
  @include sprite($normal-sprite);

  @media (-webkit-min-device-pixel-ratio: 2),
         (min-resolution: 192dpi) {
    @include sprite-image($retina-sprite);
    @include sprite-background-size($normal-sprite);
  }
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}

/*
The `retina-sprites` mixin generates a CSS rule and media query for retina groups
  This yields the same output as CSS retina template but can be overridden in SCSS

@include retina-sprites($retina-groups);
*/
@mixin retina-sprites($retina-groups) {
  @each $retina-group in $retina-groups {
    $sprite-name: nth($retina-group, 1);
    .#{$sprite-name} {
      @include retina-sprite($retina-group);
    }
  }
}
